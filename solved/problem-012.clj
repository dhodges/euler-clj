#^:shebang '[
             exec clj clojure.lang.Script "$0" -- "$@"
             ]

(ns dh.euler
  (:use [clojure.contrib.test-is]))

;; Problem 12
;;
;; http://projecteuler.net/index.php?section=problems&id=12
;;
;; The sequence of triangle numbers is generated by adding the natural numbers. 
;; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
;; The first ten terms would be:
;;
;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;;
;; Let us list the factors of the first seven triangle numbers:
;;
;;      1: 1
;;      3: 1,3
;;      6: 1,2,3,6
;;     10: 1,2,5,10
;;     15: 1,3,5,15
;;     21: 1,3,7,21
;;     28: 1,2,4,7,14,28
;;
;; We can see that 28 is the first triangle number to have over five divisors.
;;
;; What is the value of the first triangle number to have over five hundred divisors?

(defstruct tn :num :n)

(defn next-tn
  [tnum]
  (let [n (inc (tnum :n))
        num (+ (tnum :num) n)]
    (struct-map tn :n n :num num)))

(defn squint
  "integer square root"
  [n]
  (int (Math/floor (Math/sqrt n))))

(defn factor?
  [x y]
  (= (rem x y) 0))

(defn factorise
  "return the factors of the given number"
  [n]
  (let [sqrt (squint n)
        factors (loop [x 1 factors '()]
                  (if (> x sqrt)
                    factors
                    (recur (inc x)
                           (if (factor? n x)
                             (concat [x (/ n x)] factors)
                             factors))))]
    (sort (set factors))))


(defn euler-012
  []
  (loop [tnum (struct-map tn :num 1 :n 1)]
    (let [num (tnum :num)
          factors (factorise num)]
      (if (> (count factors) 500)
        (do
          (println (format "%s has %s factors:" num (count factors)))
          (println factors))
        num
        (recur (next-tn tnum))))))

(deftest test-euler-012
  []
  (is (= (solution) 76576500)))



      
